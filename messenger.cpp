#include "messenger.h"
#include "ui_messenger.h"
#include "QIcon"
#include <iostream>
#include <string>
#include <regex>

using namespace std;

Messenger::Messenger(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::Messenger)
{
    ui->setupUi(this);
    this->setWindowFlags(Qt::CustomizeWindowHint);
    this->setWindowFlags(Qt::WindowTitleHint | Qt::WindowCloseButtonHint);
    this->setWindowIcon(QIcon(":/logo-chatix.png"));
    ui->pushButton->setIcon(QIcon(":/send-message.png"));
    ui->pushButton_3->setIcon(QIcon(":/door.png"));
    ui->pushButton->setShortcut(Qt::Key_Return);
    ui->pushButton_3->setToolTip("–í–æ–∑–≤—Ä–∞—Ç –≤ —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

    socket = new QTcpSocket(this);
        connect(socket,SIGNAL(readyRead()),this,SLOT(sockReady()));
        connect(socket,SIGNAL(disconnected()),this,SLOT(sockDisconnect()));

    tmr = new QTimer();
    connect(tmr, SIGNAL(timeout()), this, SLOT(updateTime()));
    tmr->setInterval(500);
}

Messenger::~Messenger()
{
    delete ui;
}

void Messenger::formLoaded()
{

    text.append("<3");
    emoji.append("üíó");

    text.append(":)");
    emoji.append("üôÇ");

    text.append(":|");
    emoji.append("üòê");

    text.append(":0");
    emoji.append("üòÆ");

    text.append(":–∑–º–µ—è:");
    emoji.append("üêç");

    text.append(":–¥—Ä–∞–∫–æ–Ω:");
    emoji.append("üêâ");

    text.append(":—Ñ–∞–∫:");
    emoji.append("üñï");

    text.append(":–ø—Ä–∏–≤–µ—Ç:");
    emoji.append("üëã");

    text.append(":—á–∞—Ç:");
    emoji.append("üí¨");

    text.append(":–æ–∫:");
    emoji.append("‚úÖ");

    text.append(":–Ω–µ—Ç:");
    emoji.append("‚ùå");

    text.append(":–¥—É–º–∞—é:");
    emoji.append("ü§î");

    text.append(":–±—É—Ä–∞—Ç–∏–Ω–æ:");
    emoji.append("ü§•");

    text.append(":—Å–æ–Ω:");
    emoji.append("üò¥");

    text.append(":–±–ª–µ–≤:");
    emoji.append("ü§Æ");

    text.append(":—Ñ—É:");
    emoji.append("ü§¢");

    text.append(":–∫—Ä—É—Ç–æ–π:");
    emoji.append("üòé");

    text.append(":–ø–∂:");
    emoji.append("ü•∫");

    text.append(":–¥–µ—Ä—å–º–æ:");
    emoji.append("üí©");

    text.append(":–∫–ª–æ—É–Ω:");
    emoji.append("ü§°");

    //ui->label->setText(*lsave+" "+*psave);

    //7.tcp.eu.ngrok.io:15595
    //socket->connectToHost("7.tcp.eu.ngrok.io",13448);
    socket->connectToHost("127.0.0.1",8080);

    QString login = *lsave;
    QString password = *psave;


    if(!socket->waitForConnected(500)){ QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); qApp->exit();   return; }
    socket->waitForBytesWritten(500);

    if(*reg)
    {
        QRegularExpression re("^(?=.*[A-Z])(?=.*[0-9])(?!.*[*&{}|+]).{4,16}$");

        QRegularExpressionMatch match = re.match(password);

        if(login.length()<3+1)
        {
            QJsonDocument reg;
            QJsonObject obj;
            obj.insert("type", "register");
            obj.insert("error", "1");
            reg.setObject(obj);
            socket->write(reg.toJson());

            //QMessageBox::information(this,"–õ–æ–≥–∏–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º","–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–æ—Å—Ç–æ—è—Ç—å –∏–∑ <3 —Å–∏–º–≤–æ–ª–æ–≤");
            //Widget* login = new Widget;
            //login->show();
            //this->close();
            return;
        }

        match.hasMatch();
        if(match.hasMatch()!=true)
        {
            QJsonDocument reg;
            QJsonObject obj;
            obj.insert("type", "register");
            obj.insert("error", "2");
            reg.setObject(obj);
            socket->write(reg.toJson());
            //QMessageBox::information(this,"–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º","–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:\n‚Ä¢ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 4 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ \n‚Ä¢ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –Ω–∞–±–æ—Ä–∞: * & { } | + \n‚Ä¢ –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã \n‚Ä¢ –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Ü–∏—Ñ—Ä—ã");
            //Widget* login = new Widget;
            //login->show();
            //this->close();
            return;
        }

        QJsonDocument reg;
        QJsonObject obj;
        obj.insert("type", "register");
        obj.insert("login", login);
        obj.insert("password", password);
        reg.setObject(obj);
        socket->write(reg.toJson());

        return;
    }

    if(!socket->waitForConnected(500)){ QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); qApp->exit();   return; }
    socket->waitForBytesWritten(500);

    QJsonDocument log;
    QJsonObject obj;
    obj.insert("type", "login");
    obj.insert("login", login);
    obj.insert("password", password);
    log.setObject(obj);
    socket->write(log.toJson());
}

void Messenger::updateTime()
{
    //–Ω—É –Ω–µ –ª–∞–≥–∞–µ—Ç –∑–∞—Ç–æ
    if(!socket->waitForConnected(500)){ QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); return; }
    //socket->waitForBytesWritten(500);

    if(loginSelectedToChat=="")
    {
        ui->listWidget_2->clear();
        return;
    }

    QJsonDocument t;
    QJsonObject obj;
    obj.insert("type", "reciveallmsg");
    obj.insert("from", loginned);
    obj.insert("to", loginSelectedToChat);
    t.setObject(obj);
    socket->write(t.toJson());
}

void Messenger::sockReady()
{
    //–Ω—É –Ω–µ –ª–∞–≥–∞–µ—Ç –∑–∞—Ç–æ
    if(!socket->waitForConnected(500)){ QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); return; }

    //socket->waitForReadyRead(100);
    Data = socket->readAll();
    qDebug() << Data;

    doc = QJsonDocument::fromJson(Data,&docError);

    QString type = doc.object().value("type").toString();


    if(docError.errorString().toInt()!=QJsonParseError::NoError){ QMessageBox::information(this, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞: "+docError.errorString()); return; }

    if ((type == "connect")&&(doc.object().value("status").toString() != "ok")){ QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); qApp->exit();  return; }
    else { /* –£–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–º QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); */ }

    if(type == "msg")
    {
        if(doc.object().value("status").toString()=="1")
        {
            Widget* login = new Widget;
            login->show();
            this->close();
            QMessageBox::information(this,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞",doc.object().value("str").toString());
            return;
        }
        QMessageBox::information(this,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞",doc.object().value("str").toString());
    }

    if((doc.object().value("login").toString() != ""))
    {
        loginned = doc.object().value("login").toString();

        QJsonDocument chatList;
        QJsonObject obj;
        obj.insert("type", "getchats");
        obj.insert("login", loginned);
        chatList.setObject(obj);
        socket->write(chatList.toJson());
        socket->waitForBytesWritten(150);
        updateTime();
        tmr->start();
    }

    if(type == "allmsg")
    {
        QJsonArray a = doc.object().value("result").toArray();
        //QMessageBox m;
        //m.setText(QString::number(a.count()*2)+ " " +QString::number(ui->listWidget_2->count()));
        //m.exec();
        //if(((a.count()*2)==ui->listWidget_2->count()))
        //{
        //    if(a[a.count()-1].toObject().value("from").toString()==loginned)
        //    {
                //return;
        //    }
            //return;
        //}
        ui->listWidget_2->clear();
        for(int i = 0;i<a.count();i++)
        {
            ui->listWidget_2->addItem("["+a[i].toObject().value("date").toString()+"]");
            ui->listWidget_2->item(ui->listWidget_2->count()-1)->setFont(sansFont);
            ui->listWidget_2->item(ui->listWidget_2->count()-1)->setForeground(timeCol);
            ui->listWidget_2->addItem(a[i].toObject().value("from").toString()+": "+a[i].toObject().value("str").toString());
        }
        if(counter == 0)
        {
            ui->listWidget_2->scrollToBottom();
            counter++;
        }
    }

    if(type == "addchat")
    {
        QString add = doc.object().value("addedlogin").toString();
        ui->lineEdit_2->clear();
        ui->listWidget->addItem(add);
    }

    if(type == "getchats")
    {
        QString chatsString = doc.object().value("chats").toString();
        if(chatsString=="")
        {
            return;
        }
        QStringList chats = chatsString.split(";");
        for(auto i:chats)
            ui->listWidget->addItem(i);
    }
};

void Messenger::sockDisconnect()
{
    socket->deleteLater();
};

void Messenger::on_pushButton_2_clicked()
{
    //–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞

    if(!socket->waitForConnected(500)){ QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); qApp->exit(); return; }
    socket->waitForBytesWritten(500);

    QString name = ui->lineEdit_2->text();


    std::string te = name.toStdString();
    for (int i = 0;i<text.count();i++)
    {
        findAndReplaceAll(te,text[i].toStdString(),emoji[i].toStdString());
    }
    name = QString::fromStdString(te);

    if(name == "")
    {
        QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —Ç–æ–≥–æ –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å");
        return;
    }

    if(loginned == "")
    {
        QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç");
        return;
    }

    QJsonDocument t;
    QJsonObject obj;
    obj.insert("type", "addfriend");
    obj.insert("login", loginned);
    obj.insert("addlogin", name);
    t.setObject(obj);
    socket->write(t.toJson());
}

void Messenger::on_listWidget_currentRowChanged(int currentRow)
{
    //—Å–º–µ–Ω–∞ —á–∞—Ç–∞
    loginSelectedToChat = ui->listWidget->item(currentRow)->text();
    counter = 0;
}


void Messenger::findAndReplaceAll(std::string & data, std::string toSearch, std::string replaceStr)
{
    // Get the first occurrence
    size_t pos = data.find(toSearch);
    // Repeat till end is reached
    while( pos != std::string::npos)
    {
        // Replace this occurrence of Sub String
        data.replace(pos, toSearch.size(), replaceStr);
        // Get the next occurrence from the current position
        pos =data.find(toSearch, pos + replaceStr.size());
    }
}

void Messenger::on_pushButton_clicked()
{
    if(!socket->waitForConnected(500)){ QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); qApp->exit();  return; }

    QString msg = ui->lineEdit->text();

    if(msg=="")
    {
        return;
    }

    std::string te = msg.toStdString();
    for (int i = 0;i<text.count();i++)
    {
        findAndReplaceAll(te,text[i].toStdString(),emoji[i].toStdString());
    }
    msg = QString::fromStdString(te);

    if(loginned == "")
    {
        QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç");
        return;
    }

    if(loginSelectedToChat=="")
    {
        QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–í—ã–±–µ—Ä–µ—Ç–µ –≤ —Å–ø–∏—Å–∫–µ —Å–ª–µ–≤–∞ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è");
        ui->listWidget_2->clear();
        return;
    }

    QJsonDocument t;
    QJsonObject obj;
    obj.insert("type", "msg");
    obj.insert("date", "");
    obj.insert("from", loginned);
    obj.insert("to", loginSelectedToChat);
    obj.insert("str", msg);
    t.setObject(obj);
    socket->write(t.toJson());
    socket->waitForBytesWritten(100);
    ui->listWidget_2->addItem("–ó–∞–≥—Ä—É–∑–∫–∞..");
    ui->listWidget_2->scrollToBottom();
    ui->lineEdit->clear();
}

void Messenger::on_pushButton_3_clicked()
{
    sockDisconnect();
    Widget* login = new Widget;
    login->show();
    this->close();
}

void Messenger::on_pushButton_4_clicked()
{
    //–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É

    if(!socket->waitForConnected(500)){ QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); qApp->exit(); return; }
    socket->waitForBytesWritten(500);

    QString name = ui->lineEdit_2->text();

    std::string te = name.toStdString();
    for (int i = 0;i<text.count();i++)
    {
        findAndReplaceAll(te,text[i].toStdString(),emoji[i].toStdString());
    }
    name = QString::fromStdString(te);

    if(name == "")
    {
        QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å");
        return;
    }

    if(loginned == "")
    {
        QMessageBox::information(this,"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç");
        return;
    }

    QJsonDocument t;
    QJsonObject obj;
    obj.insert("type", "addgroup");
    obj.insert("login", loginned);
    obj.insert("addlogin", name);
    t.setObject(obj);
    socket->write(t.toJson());
}
